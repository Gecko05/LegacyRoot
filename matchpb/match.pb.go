// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: match.proto

package matchpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FactionType int32

const (
	FactionType_MARQUISE    FactionType = 0
	FactionType_EYRIE       FactionType = 1
	FactionType_ALLIANCE    FactionType = 2
	FactionType_VAGABOND    FactionType = 3
	FactionType_RIVERFOLK   FactionType = 4
	FactionType_LIZARD      FactionType = 5
	FactionType_UNDERGROUND FactionType = 8
	FactionType_CORVID      FactionType = 9
	FactionType_HUNDREDS    FactionType = 10
	FactionType_KEEPERS     FactionType = 11
	FactionType_BANDITS     FactionType = 12
	FactionType_PROTECTOR   FactionType = 13
	FactionType_BAND        FactionType = 14
)

// Enum value maps for FactionType.
var (
	FactionType_name = map[int32]string{
		0:  "MARQUISE",
		1:  "EYRIE",
		2:  "ALLIANCE",
		3:  "VAGABOND",
		4:  "RIVERFOLK",
		5:  "LIZARD",
		8:  "UNDERGROUND",
		9:  "CORVID",
		10: "HUNDREDS",
		11: "KEEPERS",
		12: "BANDITS",
		13: "PROTECTOR",
		14: "BAND",
	}
	FactionType_value = map[string]int32{
		"MARQUISE":    0,
		"EYRIE":       1,
		"ALLIANCE":    2,
		"VAGABOND":    3,
		"RIVERFOLK":   4,
		"LIZARD":      5,
		"UNDERGROUND": 8,
		"CORVID":      9,
		"HUNDREDS":    10,
		"KEEPERS":     11,
		"BANDITS":     12,
		"PROTECTOR":   13,
		"BAND":        14,
	}
)

func (x FactionType) Enum() *FactionType {
	p := new(FactionType)
	*p = x
	return p
}

func (x FactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[0].Descriptor()
}

func (FactionType) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[0]
}

func (x FactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FactionType.Descriptor instead.
func (FactionType) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

type MapType int32

const (
	MapType_AUTUMN   MapType = 0
	MapType_WINTER   MapType = 1
	MapType_LAKE     MapType = 2
	MapType_MOUNTAIN MapType = 3
)

// Enum value maps for MapType.
var (
	MapType_name = map[int32]string{
		0: "AUTUMN",
		1: "WINTER",
		2: "LAKE",
		3: "MOUNTAIN",
	}
	MapType_value = map[string]int32{
		"AUTUMN":   0,
		"WINTER":   1,
		"LAKE":     2,
		"MOUNTAIN": 3,
	}
)

func (x MapType) Enum() *MapType {
	p := new(MapType)
	*p = x
	return p
}

func (x MapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapType) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[1].Descriptor()
}

func (MapType) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[1]
}

func (x MapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapType.Descriptor instead.
func (MapType) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

type LandmarkType int32

const (
	LandmarkType_TOWER   LandmarkType = 0
	LandmarkType_FERRY   LandmarkType = 1
	LandmarkType_CITY    LandmarkType = 2
	LandmarkType_FORGE   LandmarkType = 3
	LandmarkType_TREETOP LandmarkType = 4
	LandmarkType_MARKET  LandmarkType = 5
)

// Enum value maps for LandmarkType.
var (
	LandmarkType_name = map[int32]string{
		0: "TOWER",
		1: "FERRY",
		2: "CITY",
		3: "FORGE",
		4: "TREETOP",
		5: "MARKET",
	}
	LandmarkType_value = map[string]int32{
		"TOWER":   0,
		"FERRY":   1,
		"CITY":    2,
		"FORGE":   3,
		"TREETOP": 4,
		"MARKET":  5,
	}
)

func (x LandmarkType) Enum() *LandmarkType {
	p := new(LandmarkType)
	*p = x
	return p
}

func (x LandmarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LandmarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[2].Descriptor()
}

func (LandmarkType) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[2]
}

func (x LandmarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LandmarkType.Descriptor instead.
func (LandmarkType) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

type Suit int32

const (
	Suit_BIRD   Suit = 0
	Suit_FOX    Suit = 1
	Suit_MOUSE  Suit = 2
	Suit_RABBIT Suit = 3
)

// Enum value maps for Suit.
var (
	Suit_name = map[int32]string{
		0: "BIRD",
		1: "FOX",
		2: "MOUSE",
		3: "RABBIT",
	}
	Suit_value = map[string]int32{
		"BIRD":   0,
		"FOX":    1,
		"MOUSE":  2,
		"RABBIT": 3,
	}
)

func (x Suit) Enum() *Suit {
	p := new(Suit)
	*p = x
	return p
}

func (x Suit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Suit) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[3].Descriptor()
}

func (Suit) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[3]
}

func (x Suit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Suit.Descriptor instead.
func (Suit) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players   []*Faction  `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"`
	Bots      []*Faction  `protobuf:"bytes,2,rep,name=Bots,proto3" json:"Bots,omitempty"`
	Hirelings []*Faction  `protobuf:"bytes,3,rep,name=Hirelings,proto3" json:"Hirelings,omitempty"`
	Map       *MapVal     `protobuf:"bytes,4,opt,name=Map,proto3" json:"Map,omitempty"`
	Landmarks []*Landmark `protobuf:"bytes,5,rep,name=Landmarks,proto3" json:"Landmarks,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_match_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

func (x *Match) GetPlayers() []*Faction {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Match) GetBots() []*Faction {
	if x != nil {
		return x.Bots
	}
	return nil
}

func (x *Match) GetHirelings() []*Faction {
	if x != nil {
		return x.Hirelings
	}
	return nil
}

func (x *Match) GetMap() *MapVal {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *Match) GetLandmarks() []*Landmark {
	if x != nil {
		return x.Landmarks
	}
	return nil
}

type MapVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type MapType `protobuf:"varint,1,opt,name=Type,proto3,enum=match.MapType" json:"Type,omitempty"`
	Name string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *MapVal) Reset() {
	*x = MapVal{}
	mi := &file_match_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapVal) ProtoMessage() {}

func (x *MapVal) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapVal.ProtoReflect.Descriptor instead.
func (*MapVal) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

func (x *MapVal) GetType() MapType {
	if x != nil {
		return x.Type
	}
	return MapType_AUTUMN
}

func (x *MapVal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Landmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type LandmarkType `protobuf:"varint,1,opt,name=Type,proto3,enum=match.LandmarkType" json:"Type,omitempty"`
	Name string       `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Landmark) Reset() {
	*x = Landmark{}
	mi := &file_match_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Landmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Landmark) ProtoMessage() {}

func (x *Landmark) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Landmark.ProtoReflect.Descriptor instead.
func (*Landmark) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

func (x *Landmark) GetType() LandmarkType {
	if x != nil {
		return x.Type
	}
	return LandmarkType_TOWER
}

func (x *Landmark) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Faction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type FactionType `protobuf:"varint,1,opt,name=Type,proto3,enum=match.FactionType" json:"Type,omitempty"`
	Name string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Faction) Reset() {
	*x = Faction{}
	mi := &file_match_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Faction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Faction) ProtoMessage() {}

func (x *Faction) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Faction.ProtoReflect.Descriptor instead.
func (*Faction) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

func (x *Faction) GetType() FactionType {
	if x != nil {
		return x.Type
	}
	return FactionType_MARQUISE
}

func (x *Faction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Clearing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suit   Suit  `protobuf:"varint,1,opt,name=Suit,proto3,enum=match.Suit" json:"Suit,omitempty"`
	Number int32 `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (x *Clearing) Reset() {
	*x = Clearing{}
	mi := &file_match_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Clearing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clearing) ProtoMessage() {}

func (x *Clearing) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clearing.ProtoReflect.Descriptor instead.
func (*Clearing) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{4}
}

func (x *Clearing) GetSuit() Suit {
	if x != nil {
		return x.Suit
	}
	return Suit_BIRD
}

func (x *Clearing) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

var File_match_proto protoreflect.FileDescriptor

var file_match_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x22, 0xd3, 0x01, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28,
	0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x42, 0x6f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x09,
	0x48, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x48, 0x69, 0x72, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x4d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x52, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x2d, 0x0a, 0x09, 0x4c,
	0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x52,
	0x09, 0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x40, 0x0a, 0x06, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x08,
	0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c,
	0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x08,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x04, 0x53, 0x75, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53,
	0x75, 0x69, 0x74, 0x52, 0x04, 0x53, 0x75, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x2a, 0xbb, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x51, 0x55, 0x49, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x59, 0x52, 0x49, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x47, 0x41,
	0x42, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x49, 0x56, 0x45, 0x52, 0x46,
	0x4f, 0x4c, 0x4b, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x5a, 0x41, 0x52, 0x44, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x52, 0x56, 0x49, 0x44, 0x10, 0x09, 0x12, 0x0c,
	0x0a, 0x08, 0x48, 0x55, 0x4e, 0x44, 0x52, 0x45, 0x44, 0x53, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07,
	0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x53, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x4e,
	0x44, 0x49, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x0e, 0x2a,
	0x39, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55,
	0x54, 0x55, 0x4d, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x0c, 0x4c, 0x61,
	0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f,
	0x57, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x45, 0x52, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4f,
	0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x45, 0x45, 0x54, 0x4f, 0x50,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x05, 0x2a, 0x30,
	0x0a, 0x04, 0x53, 0x75, 0x69, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x52, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x46, 0x4f, 0x58, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x55,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x42, 0x42, 0x49, 0x54, 0x10, 0x03,
	0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x65, 0x63, 0x6b, 0x6f, 0x30, 0x35, 0x2f, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x6f, 0x6f,
	0x74, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_match_proto_rawDescOnce sync.Once
	file_match_proto_rawDescData = file_match_proto_rawDesc
)

func file_match_proto_rawDescGZIP() []byte {
	file_match_proto_rawDescOnce.Do(func() {
		file_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_proto_rawDescData)
	})
	return file_match_proto_rawDescData
}

var file_match_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_match_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_match_proto_goTypes = []any{
	(FactionType)(0),  // 0: match.FactionType
	(MapType)(0),      // 1: match.MapType
	(LandmarkType)(0), // 2: match.LandmarkType
	(Suit)(0),         // 3: match.Suit
	(*Match)(nil),     // 4: match.Match
	(*MapVal)(nil),    // 5: match.MapVal
	(*Landmark)(nil),  // 6: match.Landmark
	(*Faction)(nil),   // 7: match.Faction
	(*Clearing)(nil),  // 8: match.Clearing
}
var file_match_proto_depIdxs = []int32{
	7, // 0: match.Match.Players:type_name -> match.Faction
	7, // 1: match.Match.Bots:type_name -> match.Faction
	7, // 2: match.Match.Hirelings:type_name -> match.Faction
	5, // 3: match.Match.Map:type_name -> match.MapVal
	6, // 4: match.Match.Landmarks:type_name -> match.Landmark
	1, // 5: match.MapVal.Type:type_name -> match.MapType
	2, // 6: match.Landmark.Type:type_name -> match.LandmarkType
	0, // 7: match.Faction.Type:type_name -> match.FactionType
	3, // 8: match.Clearing.Suit:type_name -> match.Suit
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_match_proto_init() }
func file_match_proto_init() {
	if File_match_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_proto_goTypes,
		DependencyIndexes: file_match_proto_depIdxs,
		EnumInfos:         file_match_proto_enumTypes,
		MessageInfos:      file_match_proto_msgTypes,
	}.Build()
	File_match_proto = out.File
	file_match_proto_rawDesc = nil
	file_match_proto_goTypes = nil
	file_match_proto_depIdxs = nil
}
